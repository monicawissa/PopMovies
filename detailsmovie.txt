package com.example.moka.popmovies.UI.Movie_Details;

import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.example.moka.popmovies.BuildConfig;
import com.example.moka.popmovies.R;
import com.example.moka.popmovies.api.OnlineComponent;
import com.example.moka.popmovies.Models.Cast;
import com.example.moka.popmovies.Models.Review;
import com.example.moka.popmovies.Models.Trailer;
import com.example.moka.popmovies.utilities.CheckInternetConnection;

import java.util.ArrayList;
import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull;

public class Detailsmovie extends OnlineComponent {
    public String option ;
    public int movie_id;

    //trailer recycleview
    private RecyclerView recyclerView;
    private TrailerAdapter adapter;
    private List<Trailer> TrailerList;

    //Review recycleview
    private RecyclerView Review_recyclerView;
    private ReviewAdapter Review_adapter;
    private List<Review> ReviewList;


    //Cast recycleview
    private RecyclerView Cast_recyclerView;
    private ActorsAdapter Cast_adapter;
    private List<Cast> CastList;

    OnlineComponent onlineComponent;

    public Detailsmovie() {

    }

    public static Detailsmovie newInstance() {
        return new Detailsmovie();
    }
    public void setattribute(String option,int movie_id) {
        this.option = option;
        this.movie_id=movie_id;
        this.execute();
    }

    @Override
    public String getPath(){
        return "https://api.themoviedb.org/3/";
    }


    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.fragment_movie, container, false);


        recyclerView = root.findViewById(R.id.m_RecyclerView);
        recyclerView.setHasFixedSize(true);

        //handling if it's in portrait position or in the rotation position


        return root;
    }

    @Override
    public void getAttribute() {
        setOption(this.option);
        setMovie_id(this.movie_id);
    }
    @Override
    public void onDataFetched(Object data) {
        switch(option) {

            case "Review":
                List<Review> movieList= (List<Review>) data;
                Review_load_data(movieList);
                break;
            case "Trailer":
                List<Trailer> trailerList= (List<Trailer>) data;
                Trailerload_data(trailerList);
                break;
            case "Actor":
                List<Cast> castList= (List<Cast>) data;
                Cast_load_data(castList);
                break;
            default:
                // code block
        }
    }



    @Override
    public void onDataError() {
        //Toast.makeText(getApplicationContext(), "Can't Fetch the data ", Toast.LENGTH_SHORT).show();
    }
    private void Trailerload_data(List<Trailer>trailers) {
        // Trailer adapter
        TrailerList = new ArrayList<>();
        recyclerView = (RecyclerView) checkNotNull(getActivity()).findViewById(R.id.trailerRcl);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity(),
                LinearLayoutManager.HORIZONTAL, false);
        recyclerView.setLayoutManager(mLayoutManager);


        CheckInternetConnection cic = new CheckInternetConnection(getActivity());
        boolean Ch = cic.isConnectingToInternet();
        if (!Ch) {
            Toast.makeText(getActivity(), R.string.no_internet_connection, Toast.LENGTH_SHORT).show();
        } else {
            try {
                if (BuildConfig.the_movie_db_API_token.isEmpty()) {
                    Toast.makeText(getActivity(), getString(R.string.api_NotFound), Toast.LENGTH_SHORT).show();

                } else {
                    TrailerList=trailers;
                    recyclerView.setAdapter(new TrailerAdapter(getActivity(), trailers));
                    recyclerView.smoothScrollToPosition(0);
                }
            } catch (Exception e) {
                Toast.makeText(getActivity(), "Exception Error", Toast.LENGTH_SHORT).show();
            }

        }
    }

    private void Review_load_data(List<Review>reviews) {
        // Review adapter
        ReviewList = new ArrayList<>();
        Review_recyclerView = (RecyclerView) checkNotNull(getActivity()).findViewById(R.id.reviewsRcl);
        RecyclerView.LayoutManager Review_mLayoutManager = new LinearLayoutManager(getActivity(),
                LinearLayoutManager.HORIZONTAL, false);
        Review_recyclerView.setLayoutManager(Review_mLayoutManager);


        CheckInternetConnection cic = new CheckInternetConnection(getActivity());
        boolean Ch = cic.isConnectingToInternet();
        if (!Ch) {
            Toast.makeText(getActivity(), R.string.no_internet_connection, Toast.LENGTH_SHORT).show();
        } else {
            try {
                if (BuildConfig.the_movie_db_API_token.isEmpty()) {
                    Toast.makeText(getActivity(), getString(R.string.api_NotFound), Toast.LENGTH_SHORT).show();

                } else {
                    ReviewList=reviews;
                    Review_recyclerView.setAdapter(new ReviewAdapter(getActivity(), reviews));
                    Review_recyclerView.smoothScrollToPosition(0);
                }
            } catch (Exception e) {
                Toast.makeText(getActivity(), "Exception Error", Toast.LENGTH_SHORT).show();
            }

        }
    }

    private void Cast_load_data(List<Cast> casts) {

        // Cast_ adapter
        CastList = new ArrayList<>();
        Cast_recyclerView = (RecyclerView) checkNotNull( getActivity()).findViewById(R.id.castRcl);
        RecyclerView.LayoutManager Cast_mLayoutManager = new LinearLayoutManager(getActivity(),
                LinearLayoutManager.HORIZONTAL, false);
        Cast_recyclerView.setLayoutManager(Cast_mLayoutManager);

        CheckInternetConnection cic = new CheckInternetConnection(getActivity());
        boolean Ch = cic.isConnectingToInternet();
        if (!Ch) {
            Toast.makeText(getActivity(), R.string.no_internet_connection, Toast.LENGTH_SHORT).show();
        } else {
            try {
                if (BuildConfig.the_movie_db_API_token.isEmpty()) {
                    Toast.makeText(getActivity(), getString(R.string.api_NotFound), Toast.LENGTH_SHORT).show();
                } else {
                    CastList=casts;
                    Cast_recyclerView.setAdapter(new ActorsAdapter(getActivity(), casts));
                    Cast_recyclerView.smoothScrollToPosition(0);

                }
            } catch (Exception e) {
                Toast.makeText(getActivity(), "Exception Error", Toast.LENGTH_SHORT).show();
            }

        }
    }

}